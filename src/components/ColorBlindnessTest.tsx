// 👁️ **カラーブラインドネステストコンポーネント**\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Eye, EyeOff, AlertTriangle, CheckCircle, Info, RefreshCw } from 'lucide-react';\nimport { ColorInfo } from '../types/color';\nimport { ColorBlindnessResult } from '../types/advanced';\nimport { simulateColorBlindness } from '../utils/advancedColorUtils';\n\ninterface ColorBlindnessTestProps {\n  colors: ColorInfo[];\n  onResultsChange: (results: ColorBlindnessResult) => void;\n  showSimulation?: boolean;\n}\n\n/**\n * 👁️ **カラーブラインドネステストコンポーネント**\n * \n * 色覚多様性（色盲・色弱）に配慮したデザインのための\n * シミュレーションとアクセシビリティ評価を提供します\n * \n * @example\n * <ColorBlindnessTest \n *   colors={paletteColors}\n *   onResultsChange={handleColorBlindnessResults}\n *   showSimulation={true}\n * />\n */\nexport default function ColorBlindnessTest({\n  colors,\n  onResultsChange,\n  showSimulation = true\n}: ColorBlindnessTestProps) {\n  const [results, setResults] = useState<ColorBlindnessResult | null>(null);\n  const [activeView, setActiveView] = useState<'original' | 'protanomaly' | 'deuteranomaly' | 'tritanomaly' | 'monochromacy'>('original');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n\n  // 🧮 **色覚シミュレーションの実行**\n  useEffect(() => {\n    if (colors.length === 0) {\n      setResults(null);\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // 非同期でシミュレーション実行（重い処理のため）\n    const runSimulation = async () => {\n      await new Promise(resolve => setTimeout(resolve, 100)); // UI更新のための短い待機\n      \n      const simulationResults = simulateColorBlindness(colors);\n      setResults(simulationResults);\n      onResultsChange(simulationResults);\n      setIsLoading(false);\n    };\n\n    runSimulation();\n  }, [colors, onResultsChange]);\n\n  // 🎨 **色覚タイプの情報**\n  const visionTypes = {\n    original: {\n      name: 'オリジナル',\n      description: '一般的な色覚（3色型色覚）',\n      icon: <Eye className=\"w-5 h-5\" />,\n      percentage: '約92%',\n      colors: results?.original || []\n    },\n    protanomaly: {\n      name: '1型色覚（赤色弱）',\n      description: 'L錐体（長波長）の感度が低下',\n      icon: <EyeOff className=\"w-5 h-5 text-red-500\" />,\n      percentage: '約1%',\n      colors: results?.protanomaly || []\n    },\n    deuteranomaly: {\n      name: '2型色覚（緑色弱）',\n      description: 'M錐体（中波長）の感度が低下',\n      icon: <EyeOff className=\"w-5 h-5 text-green-500\" />,\n      percentage: '約5%',\n      colors: results?.deuteranomaly || []\n    },\n    tritanomaly: {\n      name: '3型色覚（青色弱）',\n      description: 'S錐体（短波長）の感度が低下',\n      icon: <EyeOff className=\"w-5 h-5 text-blue-500\" />,\n      percentage: '約0.01%',\n      colors: results?.tritanomaly || []\n    },\n    monochromacy: {\n      name: '1色型色覚（全色盲）',\n      description: '色相を識別できない',\n      icon: <EyeOff className=\"w-5 h-5 text-gray-500\" />,\n      percentage: '約0.003%',\n      colors: results?.monochromacy || []\n    }\n  };\n\n  // 🎨 **パレット表示コンポーネント**\n  const PaletteView = ({ colors, label }: { colors: ColorInfo[]; label: string }) => {\n    if (colors.length === 0) return null;\n    \n    return (\n      <div className=\"space-y-3\">\n        <h4 className=\"font-medium text-gray-800\">{label}</h4>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3\">\n          {colors.map((color, index) => (\n            <div key={index} className=\"space-y-2\">\n              <div \n                className=\"w-full h-16 rounded-lg border-2 border-gray-200 shadow-sm\"\n                style={{ backgroundColor: color.hex }}\n              />\n              <div className=\"text-center\">\n                <p className=\"text-xs font-mono text-gray-600\">{color.hex}</p>\n                <p className=\"text-xs text-gray-500 truncate\">{color.name}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // 📊 **アクセシビリティスコア計算**\n  const getAccessibilityScore = () => {\n    if (!results) return 0;\n    \n    const totalIssues = results.accessibility.issues.length;\n    const maxPossibleIssues = colors.length * (colors.length - 1) / 2; // 全組み合わせ\n    \n    return Math.round(((maxPossibleIssues - totalIssues) / maxPossibleIssues) * 100);\n  };\n\n  if (colors.length === 0) {\n    return (\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6\">\n        <div className=\"flex items-center\">\n          <AlertTriangle className=\"w-5 h-5 text-yellow-600 mr-2\" />\n          <p className=\"text-yellow-800\">\n            色覚多様性テストには最低1色必要です。パレットに色を追加してください。\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-lg p-6\">\n        <div className=\"flex items-center justify-center py-12\">\n          <RefreshCw className=\"w-8 h-8 text-blue-600 animate-spin mr-3\" />\n          <p className=\"text-gray-600\">色覚シミュレーションを実行中...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!results) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <div className=\"flex items-center\">\n          <AlertTriangle className=\"w-5 h-5 text-red-600 mr-2\" />\n          <p className=\"text-red-800\">\n            シミュレーションの実行に失敗しました。再試行してください。\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentVisionType = visionTypes[activeView];\n  const accessibilityScore = getAccessibilityScore();\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      {/* 🏷️ **ヘッダー** */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n          <Eye className=\"w-5 h-5 mr-2\" />\n          色覚多様性テスト\n        </h3>\n        \n        {/* 📊 **アクセシビリティスコア** */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-600\">アクセシビリティスコア</p>\n            <p className={`text-2xl font-bold ${\n              accessibilityScore >= 80 ? 'text-green-600' :\n              accessibilityScore >= 60 ? 'text-yellow-600' :\n              'text-red-600'\n            }`}>\n              {accessibilityScore}%\n            </p>\n          </div>\n          {results.accessibility.isAccessible ? (\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          ) : (\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n          )}\n        </div>\n      </div>\n\n      {/* 🎯 **色覚タイプ選択** */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-wrap gap-2\">\n          {Object.entries(visionTypes).map(([key, type]) => (\n            <button\n              key={key}\n              onClick={() => setActiveView(key as typeof activeView)}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                activeView === key\n                  ? 'bg-blue-100 text-blue-800 border-2 border-blue-300'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200 border-2 border-transparent'\n              }`}\n            >\n              {type.icon}\n              <span>{type.name}</span>\n              <span className=\"text-xs opacity-75\">({type.percentage})</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* 🎨 **選択された色覚タイプの情報** */}\n      <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h4 className=\"font-medium text-gray-800 flex items-center\">\n            {currentVisionType.icon}\n            <span className=\"ml-2\">{currentVisionType.name}</span>\n          </h4>\n          <span className=\"text-sm text-gray-600\">人口の{currentVisionType.percentage}</span>\n        </div>\n        <p className=\"text-sm text-gray-600\">{currentVisionType.description}</p>\n      </div>\n\n      {/* 🎨 **カラーパレット表示** */}\n      {showSimulation && (\n        <div className=\"mb-6\">\n          <PaletteView \n            colors={currentVisionType.colors} \n            label={`${currentVisionType.name}での見え方`}\n          />\n        </div>\n      )}\n\n      {/* 📊 **比較表示（オリジナルとの並列表示）** */}\n      {activeView !== 'original' && showSimulation && (\n        <div className=\"mb-6 p-4 border rounded-lg\">\n          <h4 className=\"font-medium text-gray-800 mb-4\">比較表示</h4>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <PaletteView colors={results.original} label=\"オリジナル\" />\n            <PaletteView colors={currentVisionType.colors} label={currentVisionType.name} />\n          </div>\n        </div>\n      )}\n\n      {/* ⚠️ **問題点とレコメンデーション** */}\n      <div className=\"space-y-4\">\n        {/* 🚨 **検出された問題** */}\n        {results.accessibility.issues.length > 0 && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center mb-3\">\n              <AlertTriangle className=\"w-5 h-5 text-red-600 mr-2\" />\n              <h4 className=\"font-medium text-red-800\">検出された問題</h4>\n            </div>\n            <ul className=\"space-y-2\">\n              {results.accessibility.issues.map((issue, index) => (\n                <li key={index} className=\"text-sm text-red-700 flex items-start\">\n                  <span className=\"mr-2\">•</span>\n                  <span>{issue}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* 💡 **改善提案** */}\n        {results.accessibility.recommendations.length > 0 && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-center mb-3\">\n              <Info className=\"w-5 h-5 text-blue-600 mr-2\" />\n              <h4 className=\"font-medium text-blue-800\">改善提案</h4>\n            </div>\n            <ul className=\"space-y-2\">\n              {results.accessibility.recommendations.map((recommendation, index) => (\n                <li key={index} className=\"text-sm text-blue-700 flex items-start\">\n                  <span className=\"mr-2\">💡</span>\n                  <span>{recommendation}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* ✅ **良好な場合のメッセージ** */}\n        {results.accessibility.isAccessible && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <div className=\"flex items-center mb-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n              <h4 className=\"font-medium text-green-800\">優秀なアクセシビリティ</h4>\n            </div>\n            <p className=\"text-sm text-green-700\">\n              このカラーパレットは色覚多様性に配慮されており、多くの人にとって区別しやすい配色になっています。\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* 📚 **詳細情報の表示/非表示** */}\n      <div className=\"mt-6\">\n        <button\n          onClick={() => setShowDetails(!showDetails)}\n          className=\"flex items-center text-sm text-blue-600 hover:text-blue-800 transition-colors\"\n        >\n          <Info className=\"w-4 h-4 mr-1\" />\n          {showDetails ? '詳細情報を隠す' : '詳細情報を表示'}\n        </button>\n        \n        {showDetails && (\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-800 mb-3\">色覚多様性について</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n              <div>\n                <h5 className=\"font-medium text-gray-700 mb-2\">🔴 1型色覚（プロタノマリー）</h5>\n                <ul className=\"space-y-1 ml-4\">\n                  <li>• L錐体（長波長・赤）の感度低下</li>\n                  <li>• 赤と緑の区別が困難</li>\n                  <li>• 男性の約1%、女性の約0.02%</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h5 className=\"font-medium text-gray-700 mb-2\">🟢 2型色覚（デュータノマリー）</h5>\n                <ul className=\"space-y-1 ml-4\">\n                  <li>• M錐体（中波長・緑）の感度低下</li>\n                  <li>• 最も一般的な色覚異常</li>\n                  <li>• 男性の約5%、女性の約0.4%</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h5 className=\"font-medium text-gray-700 mb-2\">🔵 3型色覚（トリタノマリー）</h5>\n                <ul className=\"space-y-1 ml-4\">\n                  <li>• S錐体（短波長・青）の感度低下</li>\n                  <li>• 青と黄の区別が困難</li>\n                  <li>• 男女とも約0.01%</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h5 className=\"font-medium text-gray-700 mb-2\">⚫ 1色型色覚（モノクロマシー）</h5>\n                <ul className=\"space-y-1 ml-4\">\n                  <li>• 色相を全く識別できない</li>\n                  <li>• 非常に稀</li>\n                  <li>• 男女とも約0.003%</li>\n                </ul>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-blue-100 rounded\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>💡 デザインのポイント:</strong> 色だけに頼らず、形状、パターン、テキストラベルなどの\n                補助的な視覚的手がかりを併用することで、より多くの人にとってアクセシブルなデザインを実現できます。\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}

// ⚡ **バッチ処理コンポーネント**\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Upload, \n  Play, \n  Pause, \n  Download, \n  Eye, \n  Settings, \n  AlertCircle, \n  CheckCircle, \n  X,\n  FileImage,\n  BarChart3,\n  Clock,\n  Trash2\n} from 'lucide-react';\nimport { BatchProcessingJob, WCAGResult, ColorBlindnessResult } from '../types/advanced';\nimport { ColorPalette } from '../types/color';\nimport { createBatchProcessor } from '../utils/projectUtils';\n\ninterface BatchProcessorProps {\n  onJobComplete?: (job: BatchProcessingJob) => void;\n  onPaletteSelect?: (palette: ColorPalette) => void;\n}\n\n/**\n * ⚡ **バッチ処理コンポーネント**\n * \n * 複数の画像から一括でカラーパレットを抽出し、\n * WCAGチェックや色覚多様性テストも并行実行します\n * \n * @example\n * <BatchProcessor \n *   onJobComplete={handleJobComplete}\n *   onPaletteSelect={handlePaletteSelect}\n * />\n */\nexport default function BatchProcessor({\n  onJobComplete,\n  onPaletteSelect\n}: BatchProcessorProps) {\n  const [jobs, setJobs] = useState<BatchProcessingJob[]>([]);\n  const [activeJob, setActiveJob] = useState<BatchProcessingJob | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n  const [newJob, setNewJob] = useState({\n    name: '',\n    images: [] as File[],\n    options: {\n      paletteSize: 5,\n      algorithm: 'kmeans' as 'kmeans' | 'median-cut' | 'octree',\n      includeWCAG: true,\n      includeColorBlindness: true\n    }\n  });\n  \n  const batchProcessor = createBatchProcessor();\n\n  // 📥 **ジョブ履歴の読み込み**\n  useEffect(() => {\n    const loadJobs = () => {\n      const allJobs = batchProcessor.getAllJobs();\n      setJobs(allJobs);\n    };\n    \n    loadJobs();\n  }, []);\n\n  // 📁 **ファイルドロップハンドラー**\n  const handleFileDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files).filter(file => \n      file.type.startsWith('image/')\n    );\n    \n    if (files.length > 0) {\n      setNewJob(prev => ({\n        ...prev,\n        images: [...prev.images, ...files],\n        name: prev.name || `バッチ処理 ${new Date().toLocaleDateString()}`\n      }));\n      setShowCreateModal(true);\n    }\n  };\n\n  // 📁 **ファイル選択ハンドラー**\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []).filter(file => \n      file.type.startsWith('image/')\n    );\n    \n    if (files.length > 0) {\n      setNewJob(prev => ({\n        ...prev,\n        images: [...prev.images, ...files],\n        name: prev.name || `バッチ処理 ${new Date().toLocaleDateString()}`\n      }));\n      setShowCreateModal(true);\n    }\n  };\n\n  // ➕ **新しいバッチジョブを作成**\n  const handleCreateJob = () => {\n    if (!newJob.name.trim() || newJob.images.length === 0) return;\n    \n    const job = batchProcessor.createJob(newJob.name.trim(), newJob.images, newJob.options);\n    setJobs([job, ...jobs]);\n    setNewJob({\n      name: '',\n      images: [],\n      options: {\n        paletteSize: 5,\n        algorithm: 'kmeans',\n        includeWCAG: true,\n        includeColorBlindness: true\n      }\n    });\n    setShowCreateModal(false);\n  };\n\n  // ▶️ **バッチ処理を開始**\n  const handleStartProcessing = async (jobId: string) => {\n    const job = jobs.find(j => j.id === jobId);\n    if (!job) return;\n    \n    setActiveJob(job);\n    \n    try {\n      await batchProcessor.startProcessing(jobId, (progress) => {\n        setJobs(prevJobs => \n          prevJobs.map(j => {\n            if (j.id === jobId) {\n              const updatedJob = batchProcessor.getJob(jobId);\n              return updatedJob || j;\n            }\n            return j;\n          })\n        );\n      });\n      \n      const completedJob = batchProcessor.getJob(jobId);\n      if (completedJob) {\n        setJobs(prevJobs => \n          prevJobs.map(j => j.id === jobId ? completedJob : j)\n        );\n        onJobComplete?.(completedJob);\n      }\n    } catch (error) {\n      console.error('Batch processing failed:', error);\n      alert('バッチ処理に失敗しました。');\n    } finally {\n      setActiveJob(null);\n    }\n  };\n\n  // 🗑️ **ジョブを削除**\n  const handleDeleteJob = (jobId: string) => {\n    if (confirm('このジョブを削除しますか？')) {\n      setJobs(jobs.filter(j => j.id !== jobId));\n    }\n  };\n\n  // 📱 **進捗バーコンポーネント**\n  const ProgressBar = ({ progress }: { progress: number }) => (\n    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n      <div \n        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n        style={{ width: `${progress}%` }}\n      />\n    </div>\n  );\n\n  // 🎨 **結果プレビューコンポーネント**\n  const ResultPreview = ({ result }: { result: BatchProcessingJob['results'][0] }) => (\n    <div className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h4 className=\"font-medium text-gray-800 truncate flex-1\">\n          {result.palette.name}\n        </h4>\n        <button\n          onClick={() => onPaletteSelect?.(result.palette)}\n          className=\"p-1 hover:bg-gray-100 rounded\"\n          title=\"パレットを選択\"\n        >\n          <Eye className=\"w-4 h-4 text-gray-500\" />\n        </button>\n      </div>\n      \n      {/* 🎨 **カラーパレット表示** */}\n      <div className=\"flex space-x-1 mb-3\">\n        {result.palette.colors.map((color, index) => (\n          <div\n            key={index}\n            className=\"w-8 h-8 rounded border border-gray-200 flex-1\"\n            style={{ backgroundColor: color.hex }}\n            title={color.hex}\n          />\n        ))}\n      </div>\n      \n      {/* 📊 **元画像プレビュー** */}\n      {result.imageUrl && (\n        <div className=\"mb-3\">\n          <img \n            src={result.imageUrl} \n            alt=\"Source\" \n            className=\"w-full h-24 object-cover rounded border border-gray-200\"\n          />\n        </div>\n      )}\n      \n      {/* 📈 **分析結果サマリー** */}\n      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n        {result.wcag && (\n          <div className=\"bg-blue-50 p-2 rounded\">\n            <p className=\"font-medium text-blue-800\">WCAG</p>\n            <p className=\"text-blue-600\">\n              {result.wcag.filter(w => w.aaLevel.normal).length}/{result.wcag.length} 合格\n            </p>\n          </div>\n        )}\n        {result.colorBlindness && (\n          <div className={`p-2 rounded ${\n            result.colorBlindness.accessibility.isAccessible \n              ? 'bg-green-50 text-green-800'\n              : 'bg-yellow-50 text-yellow-800'\n          }`}>\n            <p className=\"font-medium\">色覚対応</p>\n            <p className={result.colorBlindness.accessibility.isAccessible ? 'text-green-600' : 'text-yellow-600'}>\n              {result.colorBlindness.accessibility.isAccessible ? '良好' : '要改善'}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  // 📊 **ジョブカードコンポーネント**\n  const JobCard = ({ job }: { job: BatchProcessingJob }) => {\n    const isProcessing = job.status === 'processing';\n    const isCompleted = job.status === 'completed';\n    const hasError = job.status === 'error';\n    \n    return (\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-gray-900\">{job.name}</h3>\n            <p className=\"text-sm text-gray-600\">\n              {job.images.length} 画像 • {job.createdAt.toLocaleDateString()}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            {/* 🚥 **ステータスアイコン** */}\n            {isProcessing && <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-pulse\" />}\n            {isCompleted && <CheckCircle className=\"w-5 h-5 text-green-600\" />}\n            {hasError && <AlertCircle className=\"w-5 h-5 text-red-600\" />}\n            {job.status === 'pending' && <Clock className=\"w-5 h-5 text-gray-400\" />}\n            \n            {/* 🗑️ **削除ボタン** */}\n            <button\n              onClick={() => handleDeleteJob(job.id)}\n              className=\"p-1 hover:bg-gray-100 rounded\"\n              title=\"削除\"\n            >\n              <Trash2 className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n        \n        {/* 📈 **進捗表示** */}\n        {isProcessing && (\n          <div className=\"mb-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm text-gray-600\">処理中...</span>\n              <span className=\"text-sm font-medium\">{job.progress}%</span>\n            </div>\n            <ProgressBar progress={job.progress} />\n          </div>\n        )}\n        \n        {/* ⚙️ **処理設定表示** */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm\">\n          <div>\n            <p className=\"text-gray-600\">パレットサイズ</p>\n            <p className=\"font-medium\">{job.options.paletteSize} 色</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">アルゴリズム</p>\n            <p className=\"font-medium\">{job.options.algorithm}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">WCAG</p>\n            <p className=\"font-medium\">{job.options.includeWCAG ? '有効' : '無効'}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">色覚テスト</p>\n            <p className=\"font-medium\">{job.options.includeColorBlindness ? '有効' : '無効'}</p>\n          </div>\n        </div>\n        \n        {/* 🔄 **アクションボタン** */}\n        <div className=\"flex space-x-3\">\n          {job.status === 'pending' && (\n            <button\n              onClick={() => handleStartProcessing(job.id)}\n              disabled={activeJob !== null}\n              className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              開始\n            </button>\n          )}\n          \n          {isCompleted && job.results && (\n            <button\n              onClick={() => {\n                // 結果をダウンロード（JSON形式）\n                const dataStr = JSON.stringify(job.results, null, 2);\n                const dataBlob = new Blob([dataStr], { type: 'application/json' });\n                const url = URL.createObjectURL(dataBlob);\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = `${job.name}_results.json`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n              }}\n              className=\"flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              結果をダウンロード\n            </button>\n          )}\n        </div>\n        \n        {/* 📊 **結果表示（完了時のみ）** */}\n        {isCompleted && job.results && job.results.length > 0 && (\n          <div className=\"mt-6\">\n            <h4 className=\"font-medium text-gray-800 mb-3\">処理結果</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {job.results.map((result, index) => (\n                <ResultPreview key={index} result={result} />\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* ❌ **エラー表示** */}\n        {hasError && (\n          <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded\">\n            <p className=\"text-red-800 text-sm\">\n              処理中にエラーが発生しました。画像ファイルを確認して再試行してください。\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 🏷️ **ヘッダー** */}\n      <div className=\"bg-white rounded-lg shadow-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">バッチ処理</h2>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <Upload className=\"w-4 h-4 mr-2\" />\n            新しいバッチジョブ\n          </button>\n        </div>\n        \n        {/* 📤 **ファイルドロップエリア** */}\n        <div\n          onDrop={handleFileDrop}\n          onDragOver={(e) => {\n            e.preventDefault();\n            setDragOver(true);\n          }}\n          onDragLeave={() => setDragOver(false)}\n          className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n            dragOver \n              ? 'border-blue-400 bg-blue-50' \n              : 'border-gray-300 hover:border-gray-400'\n          }`}\n        >\n          <FileImage className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-600 mb-2\">\n            画像ファイルをドラッグ&ドロップ、または\n          </p>\n          <label className=\"inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors\">\n            <Upload className=\"w-4 h-4 mr-2\" />\n            ファイルを選択\n            <input\n              type=\"file\"\n              multiple\n              accept=\"image/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n          </label>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            対応形式: JPG, PNG, GIF, WebP など\n          </p>\n        </div>\n      </div>\n      \n      {/* 📊 **統計情報** */}\n      {jobs.length > 0 && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <p className=\"text-2xl font-bold text-blue-600\">{jobs.length}</p>\n            <p className=\"text-sm text-gray-600\">総ジョブ数</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <p className=\"text-2xl font-bold text-green-600\">\n              {jobs.filter(j => j.status === 'completed').length}\n            </p>\n            <p className=\"text-sm text-gray-600\">完了済み</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <p className=\"text-2xl font-bold text-yellow-600\">\n              {jobs.filter(j => j.status === 'processing').length}\n            </p>\n            <p className=\"text-sm text-gray-600\">処理中</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <p className=\"text-2xl font-bold text-gray-600\">\n              {jobs.reduce((acc, job) => acc + job.images.length, 0)}\n            </p>\n            <p className=\"text-sm text-gray-600\">総画像数</p>\n          </div>\n        </div>\n      )}\n      \n      {/* 📋 **ジョブ一覧** */}\n      <div className=\"space-y-4\">\n        {jobs.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow-lg p-12 text-center\">\n            <BarChart3 className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500 mb-2\">まだバッチジョブがありません</p>\n            <p className=\"text-sm text-gray-400\">画像をアップロードして最初のジョブを作成しましょう</p>\n          </div>\n        ) : (\n          jobs.map((job) => <JobCard key={job.id} job={job} />)\n        )}\n      </div>\n      \n      {/* ➕ **新規ジョブ作成モーダル** */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">新しいバッチジョブを作成</h3>\n              <button\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setNewJob({\n                    name: '',\n                    images: [],\n                    options: {\n                      paletteSize: 5,\n                      algorithm: 'kmeans',\n                      includeWCAG: true,\n                      includeColorBlindness: true\n                    }\n                  });\n                }}\n                className=\"p-1 hover:bg-gray-100 rounded\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            \n            {/* 📝 **ジョブ名** */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                ジョブ名 *\n              </label>\n              <input\n                type=\"text\"\n                value={newJob.name}\n                onChange={(e) => setNewJob(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: ブランド画像のカラー抽出\"\n              />\n            </div>\n            \n            {/* 🖼️ **選択された画像** */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                選択された画像 ({newJob.images.length})\n              </label>\n              <div className=\"max-h-40 overflow-y-auto border border-gray-300 rounded-lg p-3\">\n                {newJob.images.length === 0 ? (\n                  <p className=\"text-gray-500 text-sm\">画像が選択されていません</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {newJob.images.map((file, index) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600 truncate flex-1\">\n                          {file.name}\n                        </span>\n                        <button\n                          onClick={() => setNewJob(prev => ({\n                            ...prev,\n                            images: prev.images.filter((_, i) => i !== index)\n                          }))}\n                          className=\"ml-2 p-1 hover:bg-gray-100 rounded\"\n                        >\n                          <X className=\"w-4 h-4 text-gray-500\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* ⚙️ **処理オプション** */}\n            <div className=\"mb-6\">\n              <h4 className=\"text-md font-medium text-gray-800 mb-3\">処理オプション</h4>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* 🎨 **パレットサイズ** */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    パレットサイズ\n                  </label>\n                  <select\n                    value={newJob.options.paletteSize}\n                    onChange={(e) => setNewJob(prev => ({\n                      ...prev,\n                      options: { ...prev.options, paletteSize: parseInt(e.target.value) }\n                    }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value={3}>3色</option>\n                    <option value={5}>5色</option>\n                    <option value={8}>8色</option>\n                    <option value={10}>10色</option>\n                  </select>\n                </div>\n                \n                {/* 🧮 **アルゴリズム** */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    抽出アルゴリズム\n                  </label>\n                  <select\n                    value={newJob.options.algorithm}\n                    onChange={(e) => setNewJob(prev => ({\n                      ...prev,\n                      options: { ...prev.options, algorithm: e.target.value as any }\n                    }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"kmeans\">K-means（高品質）</option>\n                    <option value=\"median-cut\">Median Cut（バランス）</option>\n                    <option value=\"octree\">Octree（高速）</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* ✅ **追加分析オプション** */}\n              <div className=\"mt-4 space-y-3\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={newJob.options.includeWCAG}\n                    onChange={(e) => setNewJob(prev => ({\n                      ...prev,\n                      options: { ...prev.options, includeWCAG: e.target.checked }\n                    }))}\n                    className=\"mr-3\"\n                  />\n                  <div>\n                    <span className=\"text-sm font-medium text-gray-700\">WCAGアクセシビリティチェック</span>\n                    <p className=\"text-xs text-gray-500\">コントラスト比の自動評価を含める</p>\n                  </div>\n                </label>\n                \n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={newJob.options.includeColorBlindness}\n                    onChange={(e) => setNewJob(prev => ({\n                      ...prev,\n                      options: { ...prev.options, includeColorBlindness: e.target.checked }\n                    }))}\n                    className=\"mr-3\"\n                  />\n                  <div>\n                    <span className=\"text-sm font-medium text-gray-700\">色覚多様性テスト</span>\n                    <p className=\"text-xs text-gray-500\">色覚異常での見え方をシミュレーション</p>\n                  </div>\n                </label>\n              </div>\n            </div>\n            \n            {/* 🔄 **アクションボタン** */}\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setNewJob({\n                    name: '',\n                    images: [],\n                    options: {\n                      paletteSize: 5,\n                      algorithm: 'kmeans',\n                      includeWCAG: true,\n                      includeColorBlindness: true\n                    }\n                  });\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={handleCreateJob}\n                disabled={!newJob.name.trim() || newJob.images.length === 0}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n              >\n                ジョブを作成\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}

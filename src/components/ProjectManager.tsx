// 💼 **プロジェクト管理コンポーネント**\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  FolderPlus, \n  Search, \n  Tag, \n  Calendar, \n  Share2, \n  Trash2, \n  Edit3, \n  Eye, \n  MoreVertical,\n  Plus,\n  Filter,\n  Download,\n  Upload\n} from 'lucide-react';\nimport { ColorProject, AdvancedExportOptions } from '../types/advanced';\nimport { ColorPalette } from '../types/color';\nimport { getProjectManager, createAdvancedExporter } from '../utils/projectUtils';\n\ninterface ProjectManagerProps {\n  onProjectSelect: (project: ColorProject) => void;\n  onPaletteSelect?: (palette: ColorPalette) => void;\n  currentProject?: ColorProject;\n}\n\n/**\n * 💼 **プロジェクト管理コンポーネント**\n * \n * 複数のカラーパレットを効率的に管理し、\n * タグ機能やバージョン管理を提供します\n * \n * @example\n * <ProjectManager \n *   onProjectSelect={handleProjectSelect}\n *   onPaletteSelect={handlePaletteSelect}\n *   currentProject={selectedProject}\n * />\n */\nexport default function ProjectManager({\n  onProjectSelect,\n  onPaletteSelect,\n  currentProject\n}: ProjectManagerProps) {\n  const [projects, setProjects] = useState<ColorProject[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [availableTags, setAvailableTags] = useState<string[]>([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showTagFilter, setShowTagFilter] = useState(false);\n  const [sortBy, setSortBy] = useState<'name' | 'created' | 'updated'>('updated');\n  const [newProject, setNewProject] = useState({ name: '', description: '', tags: [] as string[] });\n  const [editingProject, setEditingProject] = useState<ColorProject | null>(null);\n  \n  const projectManager = getProjectManager();\n  const exporter = createAdvancedExporter();\n\n  // 📥 **プロジェクトデータの読み込み**\n  useEffect(() => {\n    const loadProjects = () => {\n      const allProjects = projectManager.getAllProjects();\n      setProjects(allProjects);\n      \n      // 🏷️ **利用可能なタグを収集**\n      const tags = new Set<string>();\n      allProjects.forEach(project => {\n        project.tags.forEach(tag => tags.add(tag));\n      });\n      setAvailableTags(Array.from(tags));\n    };\n    \n    loadProjects();\n  }, [projectManager]);\n\n  // 🔍 **フィルタリングとソート**\n  const filteredProjects = projects\n    .filter(project => {\n      const matchesSearch = !searchQuery || \n        project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        project.description?.toLowerCase().includes(searchQuery.toLowerCase());\n      \n      const matchesTags = selectedTags.length === 0 ||\n        selectedTags.some(tag => project.tags.includes(tag));\n      \n      return matchesSearch && matchesTags;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'created':\n          return b.createdAt.getTime() - a.createdAt.getTime();\n        case 'updated':\n        default:\n          return b.updatedAt.getTime() - a.updatedAt.getTime();\n      }\n    });\n\n  // ➕ **新しいプロジェクトを作成**\n  const handleCreateProject = async () => {\n    if (!newProject.name.trim()) return;\n    \n    const project = projectManager.createProject(\n      newProject.name.trim(),\n      newProject.description.trim() || undefined,\n      newProject.tags\n    );\n    \n    setProjects(projectManager.getAllProjects());\n    setNewProject({ name: '', description: '', tags: [] });\n    setShowCreateModal(false);\n    onProjectSelect(project);\n  };\n\n  // ✏️ **プロジェクトを編集**\n  const handleEditProject = (project: ColorProject) => {\n    setEditingProject(project);\n    setNewProject({\n      name: project.name,\n      description: project.description || '',\n      tags: [...project.tags]\n    });\n    setShowCreateModal(true);\n  };\n\n  // 💾 **プロジェクト更新を保存**\n  const handleUpdateProject = () => {\n    if (!editingProject || !newProject.name.trim()) return;\n    \n    const updatedProject = {\n      ...editingProject,\n      name: newProject.name.trim(),\n      description: newProject.description.trim() || undefined,\n      tags: newProject.tags,\n      updatedAt: new Date()\n    };\n    \n    // プロジェクトマネージャーに更新機能を追加する必要がありますが、\n    // ここでは直接更新\n    const allProjects = projectManager.getAllProjects();\n    const index = allProjects.findIndex(p => p.id === editingProject.id);\n    if (index !== -1) {\n      allProjects[index] = updatedProject;\n      setProjects([...allProjects]);\n    }\n    \n    setNewProject({ name: '', description: '', tags: [] });\n    setEditingProject(null);\n    setShowCreateModal(false);\n  };\n\n  // 🗑️ **プロジェクトを削除**\n  const handleDeleteProject = (projectId: string) => {\n    if (confirm('このプロジェクトを削除しますか？この操作は取り消せません。')) {\n      const updatedProjects = projects.filter(p => p.id !== projectId);\n      setProjects(updatedProjects);\n      \n      // ローカルストレージからも削除\n      if (typeof window !== 'undefined') {\n        const data = JSON.stringify(updatedProjects.map(p => [p.id, p]));\n        localStorage.setItem('colorProjects', data);\n      }\n    }\n  };\n\n  // 🏷️ **タグを追加**\n  const handleAddTag = (newTag: string) => {\n    if (newTag.trim() && !newProject.tags.includes(newTag.trim())) {\n      setNewProject(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()]\n      }));\n    }\n  };\n\n  // 📤 **プロジェクトをエクスポート**\n  const handleExportProject = async (project: ColorProject) => {\n    const exportOptions: AdvancedExportOptions = {\n      format: 'hex',\n      includeNames: true,\n      fileType: 'json',\n      includeWCAG: true,\n      includeColorBlindness: true,\n      includeLAB: true,\n      compression: 'zip',\n      naming: 'auto'\n    };\n    \n    try {\n      // 全パレットを結合してエクスポート\n      const combinedPalette = {\n        id: project.id,\n        name: project.name,\n        colors: project.palettes.flatMap(p => p.colors),\n        createdAt: project.createdAt,\n        imageUrl: undefined\n      };\n      \n      const blob = await exporter.exportPalette(combinedPalette, exportOptions);\n      \n      // ダウンロード実行\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${project.name}_project.zip`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('エクスポートに失敗しました。');\n    }\n  };\n\n  // 🎨 **パレットプレビューコンポーネント**\n  const PalettePreview = ({ palette }: { palette: ColorPalette }) => (\n    <div \n      className=\"flex space-x-1 cursor-pointer hover:scale-105 transition-transform\"\n      onClick={() => onPaletteSelect?.(palette)}\n      title={palette.name}\n    >\n      {palette.colors.slice(0, 5).map((color, index) => (\n        <div\n          key={index}\n          className=\"w-4 h-4 rounded-sm border border-gray-200\"\n          style={{ backgroundColor: color.hex }}\n        />\n      ))}\n      {palette.colors.length > 5 && (\n        <div className=\"w-4 h-4 rounded-sm bg-gray-200 flex items-center justify-center\">\n          <span className=\"text-xs text-gray-600\">+{palette.colors.length - 5}</span>\n        </div>\n      )}\n    </div>\n  );\n\n  // 📊 **プロジェクトカードコンポーネント**\n  const ProjectCard = ({ project }: { project: ColorProject }) => {\n    const [showDropdown, setShowDropdown] = useState(false);\n    \n    return (\n      <div className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex-1\">\n            <h3 \n              className=\"font-semibold text-gray-900 cursor-pointer hover:text-blue-600\"\n              onClick={() => onProjectSelect(project)}\n            >\n              {project.name}\n            </h3>\n            {project.description && (\n              <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                {project.description}\n              </p>\n            )}\n          </div>\n          \n          {/* ⚙️ **アクションメニュー** */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowDropdown(!showDropdown)}\n              className=\"p-1 hover:bg-gray-100 rounded\"\n            >\n              <MoreVertical className=\"w-4 h-4 text-gray-500\" />\n            </button>\n            \n            {showDropdown && (\n              <div className=\"absolute right-0 top-8 bg-white border border-gray-200 rounded-lg shadow-lg z-10 w-48\">\n                <button\n                  onClick={() => {\n                    onProjectSelect(project);\n                    setShowDropdown(false);\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                >\n                  <Eye className=\"w-4 h-4 mr-2\" />\n                  開く\n                </button>\n                <button\n                  onClick={() => {\n                    handleEditProject(project);\n                    setShowDropdown(false);\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                >\n                  <Edit3 className=\"w-4 h-4 mr-2\" />\n                  編集\n                </button>\n                <button\n                  onClick={() => {\n                    handleExportProject(project);\n                    setShowDropdown(false);\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  エクスポート\n                </button>\n                <hr className=\"my-1\" />\n                <button\n                  onClick={() => {\n                    handleDeleteProject(project.id);\n                    setShowDropdown(false);\n                  }}\n                  className=\"flex items-center w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  削除\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* 🏷️ **タグ表示** */}\n        {project.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-3\">\n            {project.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        )}\n        \n        {/* 🎨 **パレットプレビュー** */}\n        <div className=\"space-y-2 mb-3\">\n          {project.palettes.slice(0, 3).map((palette) => (\n            <div key={palette.id} className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 truncate flex-1 mr-2\">\n                {palette.name}\n              </span>\n              <PalettePreview palette={palette} />\n            </div>\n          ))}\n          {project.palettes.length > 3 && (\n            <p className=\"text-xs text-gray-500\">\n              他 {project.palettes.length - 3} パレット\n            </p>\n          )}\n        </div>\n        \n        {/* 📅 **日付情報** */}\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <span className=\"flex items-center\">\n            <Calendar className=\"w-3 h-3 mr-1\" />\n            {project.updatedAt.toLocaleDateString()}\n          </span>\n          <span>\n            {project.palettes.length} パレット\n          </span>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      {/* 🏷️ **ヘッダー** */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">プロジェクト管理</h2>\n        <button\n          onClick={() => setShowCreateModal(true)}\n          className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          <FolderPlus className=\"w-4 h-4 mr-2\" />\n          新規プロジェクト\n        </button>\n      </div>\n      \n      {/* 🔧 **コントロールバー** */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        {/* 🔍 **検索** */}\n        <div className=\"flex-1 relative\">\n          <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"プロジェクト名または説明で検索...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n        \n        {/* 🏷️ **タグフィルター** */}\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowTagFilter(!showTagFilter)}\n            className={`flex items-center px-4 py-2 border rounded-lg transition-colors ${\n              selectedTags.length > 0 \n                ? 'bg-blue-100 border-blue-300 text-blue-800'\n                : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'\n            }`}\n          >\n            <Tag className=\"w-4 h-4 mr-2\" />\n            タグ {selectedTags.length > 0 && `(${selectedTags.length})`}\n          </button>\n          \n          {showTagFilter && (\n            <div className=\"absolute right-0 top-12 bg-white border border-gray-200 rounded-lg shadow-lg z-10 w-64 p-3\">\n              <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                {availableTags.map((tag) => (\n                  <label key={tag} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedTags.includes(tag)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedTags([...selectedTags, tag]);\n                        } else {\n                          setSelectedTags(selectedTags.filter(t => t !== tag));\n                        }\n                      }}\n                      className=\"mr-2\"\n                    />\n                    <span className=\"text-sm\">{tag}</span>\n                  </label>\n                ))}\n              </div>\n              {selectedTags.length > 0 && (\n                <button\n                  onClick={() => setSelectedTags([])}\n                  className=\"mt-2 text-sm text-blue-600 hover:text-blue-800\"\n                >\n                  すべて解除\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* 📊 **ソート** */}\n        <select\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value as typeof sortBy)}\n          className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        >\n          <option value=\"updated\">更新日順</option>\n          <option value=\"created\">作成日順</option>\n          <option value=\"name\">名前順</option>\n        </select>\n      </div>\n      \n      {/* 📊 **統計情報** */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <p className=\"text-2xl font-bold text-blue-600\">{projects.length}</p>\n          <p className=\"text-sm text-gray-600\">総プロジェクト数</p>\n        </div>\n        <div className=\"bg-green-50 p-4 rounded-lg\">\n          <p className=\"text-2xl font-bold text-green-600\">\n            {projects.reduce((acc, p) => acc + p.palettes.length, 0)}\n          </p>\n          <p className=\"text-sm text-gray-600\">総パレット数</p>\n        </div>\n        <div className=\"bg-purple-50 p-4 rounded-lg\">\n          <p className=\"text-2xl font-bold text-purple-600\">{availableTags.length}</p>\n          <p className=\"text-sm text-gray-600\">利用中タグ数</p>\n        </div>\n      </div>\n      \n      {/* 📋 **プロジェクト一覧** */}\n      {filteredProjects.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <FolderPlus className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n          <p className=\"text-gray-500 mb-2\">\n            {projects.length === 0 \n              ? 'まだプロジェクトがありません' \n              : '条件に一致するプロジェクトがありません'\n            }\n          </p>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"text-blue-600 hover:text-blue-800\"\n          >\n            最初のプロジェクトを作成\n          </button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProjects.map((project) => (\n            <ProjectCard key={project.id} project={project} />\n          ))}\n        </div>\n      )}\n      \n      {/* ➕ **新規作成/編集モーダル** */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {editingProject ? 'プロジェクトを編集' : '新しいプロジェクトを作成'}\n            </h3>\n            \n            {/* 📝 **プロジェクト名** */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                プロジェクト名 *\n              </label>\n              <input\n                type=\"text\"\n                value={newProject.name}\n                onChange={(e) => setNewProject(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"例: ブランドカラーパレット\"\n              />\n            </div>\n            \n            {/* 📝 **説明** */}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                説明\n              </label>\n              <textarea\n                value={newProject.description}\n                onChange={(e) => setNewProject(prev => ({ ...prev, description: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"プロジェクトの説明を入力...\"\n              />\n            </div>\n            \n            {/* 🏷️ **タグ** */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                タグ\n              </label>\n              <div className=\"flex flex-wrap gap-2 mb-2\">\n                {newProject.tags.map((tag, index) => (\n                  <span\n                    key={index}\n                    className=\"flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\"\n                  >\n                    {tag}\n                    <button\n                      onClick={() => setNewProject(prev => ({\n                        ...prev,\n                        tags: prev.tags.filter((_, i) => i !== index)\n                      }))}\n                      className=\"ml-1 text-blue-600 hover:text-blue-800\"\n                    >\n                      ×\n                    </button>\n                  </span>\n                ))}\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"タグを入力してEnterを押す\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddTag(e.currentTarget.value);\n                    e.currentTarget.value = '';\n                  }\n                }}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n            \n            {/* 🔄 **アクションボタン** */}\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setEditingProject(null);\n                  setNewProject({ name: '', description: '', tags: [] });\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\"\n              >\n                キャンセル\n              </button>\n              <button\n                onClick={editingProject ? handleUpdateProject : handleCreateProject}\n                disabled={!newProject.name.trim()}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors\"\n              >\n                {editingProject ? '更新' : '作成'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}

// 🎛️ **精密色調整コンポーネント**\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Settings, RotateCcw, Copy, Check } from 'lucide-react';\nimport { ColorInfo } from '../types/color';\nimport { AdvancedColorInfo, PreciseColorAdjustment } from '../types/advanced';\nimport { createAdvancedColorInfo, rgbToLab, labToRgb, rgbToLch } from '../utils/advancedColorUtils';\n\ninterface PreciseColorAdjusterProps {\n  color: ColorInfo;\n  onColorChange: (color: AdvancedColorInfo) => void;\n  mode?: 'hsl' | 'lab' | 'lch';\n  showHistory?: boolean;\n}\n\n/**\n * 🎨 **精密色調整コンポーネント**\n * \n * HSL、LAB、LCH色空間での高精度な色調整を提供\n * リアルタイムプレビューと調整履歴機能付き\n * \n * @example\n * <PreciseColorAdjuster \n *   color={myColor}\n *   onColorChange={handleColorChange}\n *   mode=\"lab\"\n *   showHistory={true}\n * />\n */\nexport default function PreciseColorAdjuster({\n  color,\n  onColorChange,\n  mode = 'hsl',\n  showHistory = true\n}: PreciseColorAdjusterProps) {\n  const [currentMode, setCurrentMode] = useState<'hsl' | 'lab' | 'lch'>(mode);\n  const [adjustments, setAdjustments] = useState<{ [key: string]: number }>({});\n  const [previewColor, setPreviewColor] = useState<AdvancedColorInfo | null>(null);\n  const [history, setHistory] = useState<PreciseColorAdjustment['history']>([]);\n  const [copied, setCopied] = useState<string | null>(null);\n\n  // 🎨 **初期色の設定**\n  useEffect(() => {\n    const advancedColor = createAdvancedColorInfo(color.rgb.r, color.rgb.g, color.rgb.b);\n    setPreviewColor(advancedColor);\n    \n    // 📊 **現在のモードに応じた初期値設定**\n    switch (currentMode) {\n      case 'hsl':\n        setAdjustments({\n          h: color.hsl.h,\n          s: color.hsl.s,\n          l: color.hsl.l\n        });\n        break;\n      case 'lab':\n        setAdjustments({\n          l: advancedColor.lab.l,\n          a: advancedColor.lab.a,\n          b: advancedColor.lab.b\n        });\n        break;\n      case 'lch':\n        setAdjustments({\n          l: advancedColor.lch.l,\n          c: advancedColor.lch.c,\n          h: advancedColor.lch.h\n        });\n        break;\n    }\n  }, [color, currentMode]);\n\n  // 🔄 **調整値変更時のプレビュー更新**\n  const updatePreview = useCallback((newAdjustments: { [key: string]: number }) => {\n    try {\n      let newRgb: { r: number; g: number; b: number };\n      \n      switch (currentMode) {\n        case 'hsl':\n          // HSL → RGB変換\n          const h = newAdjustments.h || 0;\n          const s = (newAdjustments.s || 0) / 100;\n          const l = (newAdjustments.l || 0) / 100;\n          \n          const c = (1 - Math.abs(2 * l - 1)) * s;\n          const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n          const m = l - c / 2;\n          \n          let r1, g1, b1;\n          if (h >= 0 && h < 60) {\n            [r1, g1, b1] = [c, x, 0];\n          } else if (h >= 60 && h < 120) {\n            [r1, g1, b1] = [x, c, 0];\n          } else if (h >= 120 && h < 180) {\n            [r1, g1, b1] = [0, c, x];\n          } else if (h >= 180 && h < 240) {\n            [r1, g1, b1] = [0, x, c];\n          } else if (h >= 240 && h < 300) {\n            [r1, g1, b1] = [x, 0, c];\n          } else {\n            [r1, g1, b1] = [c, 0, x];\n          }\n          \n          newRgb = {\n            r: Math.round((r1 + m) * 255),\n            g: Math.round((g1 + m) * 255),\n            b: Math.round((b1 + m) * 255)\n          };\n          break;\n          \n        case 'lab':\n          // LAB → RGB変換\n          newRgb = labToRgb({\n            l: newAdjustments.l || 0,\n            a: newAdjustments.a || 0,\n            b: newAdjustments.b || 0\n          });\n          break;\n          \n        case 'lch':\n          // LCH → LAB → RGB変換\n          const lchL = newAdjustments.l || 0;\n          const lchC = newAdjustments.c || 0;\n          const lchH = (newAdjustments.h || 0) * Math.PI / 180;\n          \n          const labFromLch = {\n            l: lchL,\n            a: lchC * Math.cos(lchH),\n            b: lchC * Math.sin(lchH)\n          };\n          \n          newRgb = labToRgb(labFromLch);\n          break;\n          \n        default:\n          newRgb = color.rgb;\n      }\n      \n      // 🎨 **プレビュー色を更新**\n      const newAdvancedColor = createAdvancedColorInfo(newRgb.r, newRgb.g, newRgb.b);\n      setPreviewColor(newAdvancedColor);\n      \n    } catch (error) {\n      console.error('Color conversion error:', error);\n    }\n  }, [currentMode, color]);\n\n  // 📊 **スライダー値変更ハンドラー**\n  const handleAdjustmentChange = (key: string, value: number) => {\n    const newAdjustments = { ...adjustments, [key]: value };\n    setAdjustments(newUdjustments);\n    updatePreview(newAdjustments);\n  };\n\n  // ✅ **変更を適用**\n  const applyChanges = () => {\n    if (!previewColor) return;\n    \n    // 📝 **履歴に追加**\n    if (showHistory) {\n      const historyEntry = {\n        before: color,\n        after: previewColor,\n        timestamp: new Date(),\n        adjustment: `${currentMode.toUpperCase()} adjustment`\n      };\n      setHistory(prev => [historyEntry, ...prev.slice(0, 9)]); // 最新10件まで保持\n    }\n    \n    onColorChange(previewColor);\n  };\n\n  // 🔄 **リセット**\n  const resetAdjustments = () => {\n    const originalColor = createAdvancedColorInfo(color.rgb.r, color.rgb.g, color.rgb.b);\n    setPreviewColor(originalColor);\n    \n    // 元の値に戻す\n    switch (currentMode) {\n      case 'hsl':\n        setAdjustments({\n          h: color.hsl.h,\n          s: color.hsl.s,\n          l: color.hsl.l\n        });\n        break;\n      case 'lab':\n        setAdjustments({\n          l: originalColor.lab.l,\n          a: originalColor.lab.a,\n          b: originalColor.lab.b\n        });\n        break;\n      case 'lch':\n        setAdjustments({\n          l: originalColor.lch.l,\n          c: originalColor.lch.c,\n          h: originalColor.lch.h\n        });\n        break;\n    }\n  };\n\n  // 📋 **クリップボードにコピー**\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(label);\n      setTimeout(() => setCopied(null), 2000);\n    } catch (error) {\n      console.error('Copy failed:', error);\n    }\n  };\n\n  // 🎛️ **スライダーコンポーネント**\n  const renderSlider = (key: string, min: number, max: number, step: number, label: string, unit: string = '') => (\n    <div key={key} className=\"mb-4\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <label className=\"text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n        <span className=\"text-sm text-gray-500\">\n          {adjustments[key]?.toFixed(1) || 0}{unit}\n        </span>\n      </div>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={adjustments[key] || 0}\n        onChange={(e) => handleAdjustmentChange(key, parseFloat(e.target.value))}\n        className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider\"\n      />\n    </div>\n  );\n\n  // 🎨 **現在のモードに応じたスライダー生成**\n  const renderModeSliders = () => {\n    switch (currentMode) {\n      case 'hsl':\n        return (\n          <>\n            {renderSlider('h', 0, 360, 1, 'Hue (色相)', '°')}\n            {renderSlider('s', 0, 100, 1, 'Saturation (彩度)', '%')}\n            {renderSlider('l', 0, 100, 1, 'Lightness (明度)', '%')}\n          </>\n        );\n      case 'lab':\n        return (\n          <>\n            {renderSlider('l', 0, 100, 0.1, 'Lightness (明度)')}\n            {renderSlider('a', -128, 127, 0.1, 'Green-Red axis (緑-赤軸)')}\n            {renderSlider('b', -128, 127, 0.1, 'Blue-Yellow axis (青-黄軸)')}\n          </>\n        );\n      case 'lch':\n        return (\n          <>\n            {renderSlider('l', 0, 100, 0.1, 'Lightness (明度)')}\n            {renderSlider('c', 0, 150, 0.1, 'Chroma (彩度)')}\n            {renderSlider('h', 0, 360, 1, 'Hue (色相)', '°')}\n          </>\n        );\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg p-6\">\n      {/* 🎯 **ヘッダー** */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          精密色調整\n        </h3>\n        \n        {/* 🔄 **モード選択** */}\n        <div className=\"flex space-x-2\">\n          {(['hsl', 'lab', 'lch'] as const).map((modeOption) => (\n            <button\n              key={modeOption}\n              onClick={() => setCurrentMode(modeOption)}\n              className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                currentMode === modeOption\n                  ? 'bg-blue-100 text-blue-800'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {modeOption.toUpperCase()}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* 🎛️ **調整コントロール** */}\n        <div>\n          <h4 className=\"text-md font-medium text-gray-800 mb-4\">\n            {currentMode.toUpperCase()}色空間での調整\n          </h4>\n          \n          {renderModeSliders()}\n          \n          {/* 🔄 **アクションボタン** */}\n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={applyChanges}\n              className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              適用\n            </button>\n            <button\n              onClick={resetAdjustments}\n              className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* 🎨 **プレビューと色情報** */}\n        <div>\n          <h4 className=\"text-md font-medium text-gray-800 mb-4\">プレビュー</h4>\n          \n          {/* 🎨 **カラープレビュー** */}\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-2\">オリジナル</p>\n              <div \n                className=\"w-full h-24 rounded-lg border-2 border-gray-200\"\n                style={{ backgroundColor: color.hex }}\n              />\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600 mb-2\">調整後</p>\n              <div \n                className=\"w-full h-24 rounded-lg border-2 border-gray-200\"\n                style={{ backgroundColor: previewColor?.hex || color.hex }}\n              />\n            </div>\n          </div>\n          \n          {/* 📊 **色情報表示** */}\n          {previewColor && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm font-medium\">HEX</span>\n                <div className=\"flex items-center space-x-2\">\n                  <code className=\"text-sm\">{previewColor.hex}</code>\n                  <button\n                    onClick={() => copyToClipboard(previewColor.hex, 'hex')}\n                    className=\"p-1 hover:bg-gray-200 rounded\"\n                  >\n                    {copied === 'hex' ? <Check className=\"w-4 h-4 text-green-600\" /> : <Copy className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm font-medium\">RGB</span>\n                <div className=\"flex items-center space-x-2\">\n                  <code className=\"text-sm\">\n                    {previewColor.rgb.r}, {previewColor.rgb.g}, {previewColor.rgb.b}\n                  </code>\n                  <button\n                    onClick={() => copyToClipboard(\n                      `rgb(${previewColor.rgb.r}, ${previewColor.rgb.g}, ${previewColor.rgb.b})`,\n                      'rgb'\n                    )}\n                    className=\"p-1 hover:bg-gray-200 rounded\"\n                  >\n                    {copied === 'rgb' ? <Check className=\"w-4 h-4 text-green-600\" /> : <Copy className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between bg-gray-50 p-3 rounded\">\n                <span className=\"text-sm font-medium\">LAB</span>\n                <div className=\"flex items-center space-x-2\">\n                  <code className=\"text-sm\">\n                    {previewColor.lab.l.toFixed(1)}, {previewColor.lab.a.toFixed(1)}, {previewColor.lab.b.toFixed(1)}\n                  </code>\n                  <button\n                    onClick={() => copyToClipboard(\n                      `lab(${previewColor.lab.l.toFixed(1)}% ${previewColor.lab.a.toFixed(1)} ${previewColor.lab.b.toFixed(1)})`,\n                      'lab'\n                    )}\n                    className=\"p-1 hover:bg-gray-200 rounded\"\n                  >\n                    {copied === 'lab' ? <Check className=\"w-4 h-4 text-green-600\" /> : <Copy className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n              \n              {/* 🔍 **WCAG情報** */}\n              <div className=\"bg-blue-50 p-3 rounded\">\n                <p className=\"text-sm font-medium text-blue-800 mb-1\">アクセシビリティ</p>\n                <p className=\"text-sm text-blue-600\">\n                  白背景でのコントラスト比: {previewColor.wcag.contrastRatio.toFixed(2)}:1\n                  <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                    previewColor.wcag.level === 'AA' ? 'bg-green-100 text-green-800' :\n                    previewColor.wcag.level === 'AAA' ? 'bg-blue-100 text-blue-800' :\n                    'bg-red-100 text-red-800'\n                  }`}>\n                    {previewColor.wcag.level}\n                  </span>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 📜 **履歴表示** */}\n      {showHistory && history.length > 0 && (\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <h4 className=\"text-md font-medium text-gray-800 mb-3\">調整履歴</h4>\n          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n            {history.map((entry, index) => (\n              <div key={index} className=\"flex items-center space-x-3 text-sm\">\n                <div className=\"flex space-x-2\">\n                  <div \n                    className=\"w-4 h-4 rounded border\"\n                    style={{ backgroundColor: entry.before.hex }}\n                  />\n                  <span>→</span>\n                  <div \n                    className=\"w-4 h-4 rounded border\"\n                    style={{ backgroundColor: entry.after.hex }}\n                  />\n                </div>\n                <span className=\"text-gray-600\">\n                  {entry.adjustment} - {entry.timestamp.toLocaleTimeString()}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <style jsx>{`\n        .slider {\n          background: linear-gradient(to right, #e5e7eb, #3b82f6);\n        }\n        .slider::-webkit-slider-thumb {\n          appearance: none;\n          height: 20px;\n          width: 20px;\n          border-radius: 50%;\n          background: #3b82f6;\n          cursor: pointer;\n          border: 2px solid #ffffff;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n        }\n        .slider::-moz-range-thumb {\n          height: 20px;\n          width: 20px;\n          border-radius: 50%;\n          background: #3b82f6;\n          cursor: pointer;\n          border: 2px solid #ffffff;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n        }\n      `}</style>\n    </div>\n  );\n}
